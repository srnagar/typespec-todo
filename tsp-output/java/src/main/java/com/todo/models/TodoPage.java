// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.todo.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The TodoPage model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class TodoPage implements JsonSerializable<TodoPage> {
    /*
     * The items in the page
     */
    @Metadata(generated = true)
    private final List<TodoItem> items;

    /*
     * The pagination property.
     */
    @Metadata(generated = true)
    private final TodoPagePagination pagination;

    /**
     * Creates an instance of TodoPage class.
     * 
     * @param items the items value to set.
     * @param pagination the pagination value to set.
     */
    @Metadata(generated = true)
    private TodoPage(List<TodoItem> items, TodoPagePagination pagination) {
        this.items = items;
        this.pagination = pagination;
    }

    /**
     * Get the items property: The items in the page.
     * 
     * @return the items value.
     */
    @Metadata(generated = true)
    public List<TodoItem> getItems() {
        return this.items;
    }

    /**
     * Get the pagination property: The pagination property.
     * 
     * @return the pagination value.
     */
    @Metadata(generated = true)
    public TodoPagePagination getPagination() {
        return this.pagination;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("items", this.items, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("pagination", this.pagination);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TodoPage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TodoPage if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TodoPage.
     */
    @Metadata(generated = true)
    public static TodoPage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<TodoItem> items = null;
            TodoPagePagination pagination = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("items".equals(fieldName)) {
                    items = reader.readArray(reader1 -> TodoItem.fromJson(reader1));
                } else if ("pagination".equals(fieldName)) {
                    pagination = TodoPagePagination.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new TodoPage(items, pagination);
        });
    }
}
